trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'MyAzureServiceConnection'
  appName: 'NodeJs-Backend-12'
  resourceGroupName: 'myAppRG'
  acrName: 'myappacr123' 
  acrLoginServer: 'myappacr123.azurecr.io'
  imageName: 'my-backend-image'
  port: '80'

stages:
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: Build
        displayName: "Build React App"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - script: |
              cd server
              ls -al
 
              echo "Navigated to web folder"
              ls -al
            displayName: "Verify Web Folder Structure"
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'  
            displayName: "Set Up Node.js"
          - script: |
              cd server
              npm install 
            displayName: "Install Dependencies in Server Folder"
          - script: |
             cd server
             npm run build
            displayName: "Build NodeJs App"
          - script: |
              echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrName) --password-stdin
              
            displayName: 'Log in to Azure Container Registry'
          - script: |
              cd server
              docker build -f Dockerfile -t $(acrLoginServer)/$(imageName):$(Build.BuildId) .
              docker push $(acrLoginServer)/$(imageName):$(Build.BuildId)
            displayName: 'Build and Push Docker Image to ACR'
  - stage: Deploy
    displayName: "Deploy Stage"
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: "Deploy to Azure App Service"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureWebAppContainer@1
            inputs:
             azureSubscription: $(azureSubscription)
             appName: 'NodeJs-Backend-12'
             imageName: $(acrLoginServer)/$(imageName):$(Build.BuildId)
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
               az webapp config container set \
                --name  $(appName) \
                --resource-group $(resourceGroupName) \
                --docker-custom-image-name $(acrLoginServer)/$(imageName):$(Build.BuildId) \
                --docker-registry-server-url https://$(acrLoginServer)\
                --enable-app-service-storage false
               az webapp config appsettings set \
               --name $(appName) \
               --resource-group $(resourceGroupName) \
               --settings PORT=$(port)
